/*
C++ short bottom-up DP, with detail explanation

There is a row of m houses in a small city, each house must be painted with one of the n colors (labeled from 1 to n), some houses that has been painted last summer should not be painted again.

A neighborhood is a maximal group of continuous houses that are painted with the same color. (For example: houses = [1,2,2,3,3,2,1,1] contains 5 neighborhoods  [{1}, {2,2}, {3,3}, {2}, {1,1}]).

Given an array houses, an m * n matrix cost and an integer target where:

houses[i]: is the color of the house i, 0 if the house is not painted yet.
cost[i][j]: is the cost of paint the house i with the color j+1.
Return the minimum cost of painting all the remaining houses in such a way that there are exactly target neighborhoods, if not possible return -1.

 

Example 1:

Input: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3
Output: 9
Explanation: Paint houses of this way [1,2,2,1,1]
This array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}].
Cost of paint all houses (1 + 1 + 1 + 1 + 5) = 9.
*/

class Solution {
public:
    int minCost(vector<int>& houses, vector<vector<int>>& cost, int m, int n, int target) {
        const int INF = 1e8;
        
        // dp[i][x][y] means the cost for color the first i houses as x group,
        // and the i-th house are colored as color y
        // dp[i][x][y] only depends on dp[i - 1], just use two 2d dp vectors and swap them.
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, INF));
        auto _dp = dp;
        
        // init: only dp[0][0] is valid.
        dp[0][0] = 0;
        
        for(int i = 0; i < m; i++) {
            for(int x = 0; x <= m; x++) fill(_dp[x].begin(), _dp[x].end(), INF);
            
            int hc = houses[i];
            
            // if houses[i] is zeros, loop all colors. else just hourse[i].
            int left = hc ? hc : 1, right = hc ? hc : n;
            for(int c = left; c <= right; c++) {
                int _cost = hc ? 0 : cost[i][c - 1];
                
                for(int x = 0; x <= m; x++) for(int y = 0; y <= n; y++) {
                    
                    // if y == c, use dp[x][y] to update _dp[x][y]
                    // else use it to update _dp[x + 1][c], with group count increase one
                    int _x = x + int(y != c);
                    if(_x <= m) {
                        _dp[_x][c] = min(_dp[_x][c], dp[x][y] + _cost);
                    }
                }
            }

            swap(dp, _dp);
        }
        
        int res = *min_element(dp[target].begin(), dp[target].end());
        return res >= INF ? -1 : res;
    }
};
