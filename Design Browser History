/*
Design Browser History
You have a browser of one tab where you start on the homepage and you can visit another url, get back in the history number of steps or move forward in the history number of steps.

Implement the BrowserHistory class:

BrowserHistory(string homepage) Initializes the object with the homepage of the browser.
void visit(string url) visits url from the current page. It clears up all the forward history.
string back(int steps) Move steps back in history. If you can only return x steps in the history and steps > x, you will return only x steps. Return the current url after moving back in history at most steps.
string forward(int steps) Move steps forward in history. If you can only forward x steps in the history and steps > x, you will forward only x steps. Return the current url after forwarding in history at most steps.
 

Example:

Input:
["BrowserHistory","visit","visit","visit","back","back","forward","visit","forward","back","back"]
[["leetcode.com"],["google.com"],["facebook.com"],["youtube.com"],[1],[1],[1],["linkedin.com"],[2],[2],[7]]
Output:
[null,null,null,null,"facebook.com","google.com","facebook.com",null,"linkedin.com","google.com","leetcode.com"]

Explanation:
BrowserHistory browserHistory = new BrowserHistory("leetcode.com");
browserHistory.visit("google.com");       // You are in "leetcode.com". Visit "google.com"
browserHistory.visit("facebook.com");     // You are in "google.com". Visit "facebook.com"
browserHistory.visit("youtube.com");      // You are in "facebook.com". Visit "youtube.com"
browserHistory.back(1);                   // You are in "youtube.com", move back to "facebook.com" return "facebook.com"
browserHistory.back(1);                   // You are in "facebook.com", move back to "google.com" return "google.com"
browserHistory.forward(1);                // You are in "google.com", move forward to "facebook.com" return "facebook.com"
browserHistory.visit("linkedin.com");     // You are in "facebook.com". Visit "linkedin.com"
browserHistory.forward(2);                // You are in "linkedin.com", you cannot move forward any steps.
browserHistory.back(2);                   // You are in "linkedin.com", move back two steps to "facebook.com" then to "google.com". return "google.com"
browserHistory.back(7);                   // You are in "google.com", you can move back only one step to "leetcode.com". return "leetcode.com"
*/

/*
Approach
We will maintain a doubly linked list of the URLs, in the order of visiting, such that the * next of a node points to the 
node visited after this node, and * prev points to the node visited just before this node. Now, you will easily get the solution.
*/
struct Node
{
    string name;
    Node* next;
    Node* prev;
    Node()
    { 
	// constructor
        next=NULL;
        prev=NULL;
    }
};

class BrowserHistory {
	Node *curr;
public:
    BrowserHistory(string homepage) {
		// create the homepage node and make * curr pointing to it
        curr=new Node;
        curr->name=homepage;
    }
    
    void visit(string url) {
	// create and insert a node with this url after the curr pointer
	// Note: the remaining forward history after curr will be cleared
	// as stated in the question
        Node* node=new Node;
        node->name=url;
        node->prev=curr;
        curr->next=node;  
        curr=curr->next;
    }
    
    string back(int steps) {
       // Go to * prev node, steps times or until curr->prev is NULL, whichever first 
	   for(int i=0; i<steps&&(curr->prev!=NULL);i++)
        {
            curr=curr->prev;
        }
        return curr->name;
    }
    
    string forward(int steps) {
       // Go to * next node, steps times or until curr->next is NULL, whichever first
	  for(int i=0; i<steps&&(curr->next!=NULL);i++)
        {
            curr=curr->next;
        }
        return curr->name;        
    }
};

/**
 * Your BrowserHistory object will be instantiated and called as such:
 * BrowserHistory* obj = new BrowserHistory(homepage);
 * obj->visit(url);
 * string param_2 = obj->back(steps);
 * string param_3 = obj->forward(steps);
 */
